
const pdfParse = require('pdf-parse');
const { index, openai /* , pinecone */ } = require('../config/aiConfig');
const multer = require('multer');


// Configurar almacenamiento temporal del archivo en memoria
const upload = multer({ storage: multer.memoryStorage() });


/**
 * 
 * @brief Procesar un archivo PDF subido, extraer su texto, dividirlo en "chunks",
 * generar embeddings utilizando la API de OpenAI, y luego subir esos embeddings a Pinecone
 * @param {Object} req.file - Archivo subido en el frontend
 * @returns  - Confirmación de la operación.
 */
const processFile = async (req, res) => {
    try {
        if (!req.file) {
            console.log('No se ha enviado ningún archivo');
            return res.status(400).json({ message: "No se ha enviado ningún archivo." });
        }

        // Cargar y procesar el PDF a texto utilizando pdf-parse 
        const pdfData = await pdfParse(req.file.buffer);
        const extractedText = pdfData.text;
        console.log('Texto extraído del PDF');

        // Dividir el texto en chunks "trocitos"
        let docChunks = splitTextIntoChunksWithOverlap(extractedText);
        console.log(`Documento dividido en ${docChunks.length} chunks`);

        // Si los chunks no son un array, los convierto a array
        if (Array.isArray(docChunks) && docChunks.length === 1 && typeof docChunks[0] === "string") {
            docChunks = docChunks[0].split("\n").filter(line => line.trim() !== "");
        }
        console.log("✅ docChunks convertido a array:", docChunks);

        // Verifico que los chunks son un array y tiene contenido
        if (!docChunks || !Array.isArray(docChunks) || docChunks.length === 0) {
            console.error("❌ Error: docChunks está vacío o no es un array.");
            return;
        }

        if (!Array.isArray(docChunks) || docChunks.some(chunk => typeof chunk !== "string")) {
            console.error("❌ Error: docChunks no es un array de strings válido.");
            return;
        }

        const MAX_TOKENS = 200; // Ajusta según el modelo
        docChunks = docChunks.map(chunk => chunk.substring(0, MAX_TOKENS));

        console.log(`📌 Cantidad de docChunks antes de embeddings: ${docChunks.length}`);

        // Generar embeddings con OpenAI 
        // const vectors = await getEmbeddings(docChunks); //FUCNIONA <--
        const vectors = [
            [
                0.0006533917, 0.023559261, 0.05767188, -0.010002157, -0.015173551,
                0.0007935148, 0.024934169, 0.028860712, -0.035326503, -0.06926571,
                0.017006764, -0.02663113, 0.008943105, -0.029430496, 0.01093115,
                0.019124867, -0.019273506, -0.031065524, 0.011408033, 0.02450064,
                0.0016814772, 0.024686439, -0.02977732, -0.007704448, 0.05058676,
                -0.0026275017, -0.045409173, -0.03126371, 0.044963256, 0.036763348,
                0.039092023, -0.032428045, 0.012696236, 0.03661471, -0.031313255,
                0.05474865, -0.012064521, 0.0087201465, 0.034781493, -0.04350164,
                0.0016938638, -0.01492582, 0.02576407, 0.019744197, -0.004431296,
                -0.020264432, 0.023014251, 0.006159223, 0.013018288, 0.02464928,
                0.012169807, 0.0092651555, 0.01879043, 0.010355175, 0.017539386,
                -0.013959667, -0.0021242972, -0.003174059, -0.021589795, -0.016028224,
                0.013575683, -0.0340383, -0.0037500346, 0.029480042, 0.008782079,
                0.025020875, -0.020227272, 0.028736847, 0.0012603337, 0.02450064,
                -0.045978956, 0.030520514, -0.007140859, -0.046350554, -0.0627256,
                -0.041618884, -0.018480767, 0.00028005266, -0.03956271, -0.0026646613,
                -0.022432081, 0.018778043, 0.002012818, 0.046201915, 0.0042485944,
                -0.01089399, -0.030148916, 0.008775886, 0.0066949422, -0.0152107105,
                -0.037531313, 0.0034682401, -0.058712352, 0.009426181, 0.035970606,
                -0.010095056, 0.0063914713, -0.056829594, -0.0012533662, 0.012107874,
            ],
            [
                0.008103391, -0.021982001, 0.005461595, 0.018760988,
                -0.033498537, 0.012307661, -0.00024016327, 0.02202721,
                0.023462538, -0.030469654, 0.009465258, 0.00067740167,
                0.038154878, -0.006911051, 0.009448306, 0.010680201,
                -0.03564588, -0.03019841, 0.044461284, 0.051581416,
                -0.026559232, 0.024411889, 0.010058602, 0.029362077,
                -0.023123484, 0.005032127, -0.017031813, -0.02737296,
                0.07332608, 0.022411471, 0.06460109, -0.047196317,
                0.042901635, 0.036233574, -0.0022010256, 0.023010466,
                -0.011352658, 0.036956888, 0.025564672, -0.033069067,
                0.0073913774, -0.03557807, -0.016930098, 0.025745502,
                0.010968397, -0.000105866086, -0.0037211177, 0.011126623,
                0.0071709924, 0.030537466, 0.018173296, -0.037002094,
                0.06595731, 0.053028047, 0.0006671594, 0.0060351617,
                -0.026785268, 0.03458351, 0.028028466, -0.0062724994,
                -0.009527418, -0.023439934, -0.015777314, -0.0059164925,
                -0.008267267, 0.00354594, -0.05280201, 0.01425157,
                0.027282547, 0.026401006, 0.010256384, -0.010013395,
                0.02121348, -0.021699456, -0.07780159, -0.03031143,
                0.018693179, 0.00747049, 0.024886565, 0.021541232,
                0.01801507, -0.015099205, -0.044551697, 0.038516536,
                -0.010634994, 0.006837589, -0.036617834, 0.012386774,
                0.0129631655, -0.03175806, 0.0060295104, -0.006498535,
                -0.009143157, 0.041409798, 0.036708247, 0.0068997494,
                0.0150653, -0.022626204, 0.014590625, 0.028096275,
            ],
            [
                0.0076378398, 0.0070156385, 0.014005881, -0.0068442156,
                -0.0042760475, 0.03908441, -0.021675466, 0.017193075,
                -0.02505313, -0.008787008, 0.03804317, 0.017662901,
                0.025764218, 0.025421372, 0.012818619, 0.07806723,
                -0.033700462, 0.016253425, -0.02834191, 0.03451313,
                -0.022780191, 0.009580632, 0.030119628, 0.022234177,
                0.02492615, -0.026411815, -0.07100715, -0.03458932,
                0.058156785, -0.020685023, -0.015478848, -0.048963442,
                0.042817615, 0.02309764, -0.027554635, 0.07156586,
                -0.004161766, -0.011898015, -0.0061616986, -0.02228497,
                0.012602753, 0.005003007, 0.034665506, 0.039541535,
                0.03212591, 0.04589053, 0.017320056, -0.030373588,
                -0.013078928, -0.016443895, 0.017243868, -0.027021319,
                0.019326339, 0.05820758, 0.016939117, -0.008723518,
                -0.013574149, 0.027529238, 0.054144222, -0.008799706,
                -0.0019459667, -0.00016249457, 0.010571076, 0.0027030841,
                0.011948807, 0.0028570474, -0.04170019, 0.09259373,
                -0.000041417265, 0.018716834, 0.0062220143, 0.03149101,
                0.029687896, -0.043452516, -0.015859786, 0.027148299,
                0.01489474, 0.022107197, 0.016177237, -0.028900621,
                -0.041674796, 0.02851968, -0.0009682216, 0.00057299674,
                0.021954821, 0.03131324, -0.073800705, -0.00542839,
                -0.009460001, -0.010717102, 0.024938848, 0.042208113,
                -0.006799773, -0.003590356, 0.0044157254, 0.037230503,
                -0.0681628, -0.06999131, 0.0014182066, 0.027884781,
            ],
            [
                -0.040112413, 0.007903961, 0.026828831, 0.0015430811, -0.057690453,
                -0.035156082, -0.041528508, 0.04814721, 0.022026425, -0.022211133,
                0.034786668, 0.048516624, -0.063785814, -0.019717574, 0.0160542,
                0.009320056, -0.025397345, 0.021841716, -0.017778141, 0.005591264,
                0.00049832667, 0.006291615, -0.016423617, 0.036695316, -0.033863127,
                -0.015046002, -0.017808925, 0.008173327, 0.0037999814, -0.0149998255,
                0.022026425, -0.029353173, 0.03965064, -0.02912229, -0.041005168,
                0.029676413, 0.0067918655, 0.08354957, -0.004975571, 0.033001155,
                0.012806418, 0.009835699, 0.0065956134, -0.018655503, 0.017670395,
                0.03158506, 0.024427628, 0.013622212, 0.017070094, -0.016131163,
                -0.012175333, 0.023088494, 0.0041174483, 0.06760311, -0.0011573108,
                -0.0012496648, 0.0113056665, 0.04586914, 0.00905069, 0.0063878167,
                -0.0071535856, -0.061969522, 0.051102534, -0.03303194, 0.0022569003,
                -0.010597619, -0.031923693, -0.006056882, 0.012706368, 0.0011813614,
                0.01743951, 0.014514967, -0.037311006, -0.03124643, -0.036048837,
                0.019532867, -0.01956365, -0.041774783, -0.015646303, -0.0128449,
                -0.04586914, 0.033062726, -0.031523492, 0.0013901198, -0.016331263,
                -0.013268189, -0.02642863, 0.0009653877, -0.059968516, 0.025181852,
                -0.049193885, -0.03195448, -0.014938257, 0.011020908, -0.024997143,
                -0.021564655, 0.034047835, -0.018455403, 0.014861295, 0.0391273,
            ],
            [
                -0.010133589, 0.021205708, -0.05666693, -0.006874099,
                -0.017058419, -0.014230146, -0.040255334, -0.004711675,
                -0.022296432, -0.0252769, 0.046267, 0.02433837,
                -0.019899376, -0.01438234, 0.054586943, 0.045176275,
                0.015029165, -0.0041916785, -0.0043787505, 0.03393928,
                0.016360864, 0.048118696, -0.01898621, -0.0051745987,
                -0.0036304628, -0.04948844, -0.052862074, -0.072850235,
                0.011807724, -0.03277246, 0.039950944, -0.037769496,
                0.02027986, -0.006205079, -0.024528611, 0.037262183,
                -0.043375313, 0.024959829, 0.0097213965, -0.01987401,
                -0.009429691, 0.007895067, 0.042842634, 0.009017499,
                0.04583578, 0.03574024, 0.020774491, -0.03921534,
                -0.025213486, 0.01599306, -0.012289672, 0.0069121476,
                -0.026786158, 0.11465287, -0.002224253, -0.0030851008,
                -0.055905957, -0.0066965395, 0.03330514, -0.049894292,
                -0.014166732, 0.0057009365, -0.006024349, -0.024883732,
                -0.000042804582, 0.045632858, -0.017197931, 0.046748947,
                -0.0101652965, 0.018808652, 0.0066521494, 0.024845684,
                0.0538767, -0.041523617, -0.0046133827, -0.032163683,
                0.051162574, 0.019772546, -0.0004062472, -0.010501391,
                -0.026684694, 0.004984356, -0.0074511683, -0.015232091,
                -0.017007688, -0.041701175, -0.111406066, 0.002416081,
                -0.010932608, -0.011940894, -0.037033893, -0.0009448716,
                -0.016665252, 0.0317071, 0.016157938, 0.024503246,
                -0.03957046, -0.02242326, 0.012613084, 0.005564596,
            ],
            [
                0.00074106886, 0.0029777156, -0.043963864, 0.012119929,
                -0.032041054, -0.018577121, -0.04190903, 0.02039302,
                -0.014312149, -0.030153476, 0.044322263, 0.04955492,
                -0.011654008, -0.051896475, 0.041741777, 0.028695978,
                0.007998317, 0.018756323, -0.03024905, 0.05266106,
                -0.01235289, 0.06933866, -0.025565943, -0.019258084,
                0.0048951614, -0.026712826, -0.06900415, -0.04644878,
                0.013822334, -0.05452475, 0.023785884, -0.041885138,
                0.0315154, -0.03244724, -0.04155063, 0.028743764,
                -0.05060623, 0.03206495, 0.010363764, -0.051131885,
                -0.0092646675, -0.015470979, 0.045755867, -0.017478025,
                0.029460568, 0.04764345, 0.01930587, -0.020046566,
                -0.0038557982, 0.005017615, -0.046711605, -0.018601015,
                0.000782509, 0.10379295, 0.023785884, -0.0028896085,
                -0.039973665, -0.013284733, 0.04427448, -0.046998326,
                -0.01329668, 0.00035877438, -0.020823102, 0.0070366077,
                0.010005363, 0.0075682355, -0.018278453, 0.060593672,
                -0.031085318, 0.01608026, 0.0024012872, 0.041646205,
                0.038635634, -0.03292511, -0.009282587, 0.01365508,
                0.061453834, 0.037178136, 0.008434372, -0.009826163,
                -0.0111403, 0.014969218, 0.005423803, -0.016713437,
                -0.011731662, -0.007604076, -0.12405455, 0.026426105,
                -0.034860477, -0.0060868445, -0.027119014, -0.00022997402,
                -0.0202855, 0.036509123, 0.017537758, 0.024729673,
                -0.045278, -0.009163121, 0.044537306, 0.010453364,
            ],
            [
                0.0021030589, 0.035167094, 0.033440974, -0.033856906,
                0.0062545855, -0.0016052396, -0.032588314, -0.010512695,
                -0.0140273245, -0.004325698, 0.018342623, 0.01202045,
                -0.007439993, 0.0120932385, 0.03622772, 0.060310215,
                -0.030238295, -0.00082471623, 0.014776003, 0.05552699,
                0.015930215, -0.011438144, -0.013445019, -0.018176252,
                -0.00813668, -0.01597181, -0.026869241, -0.05473672,
                0.016928453, -0.014401664, 0.023292221, -0.039887927,
                0.048497733, 0.012030848, -0.0029973136, -0.021108575,
                -0.014110511, 0.0684209, 0.0013985732, -0.030487854,
                0.026494902, 0.03562462, 0.0048794085, 0.088011324,
                -0.012509171, 0.021441322, -0.0022369372, -0.029572802,
                0.03963837, 0.0042737066, -0.04425522, -0.027888276,
                -0.005973831, 0.046584442, 0.007866324, 0.048497733,
                -0.0042997026, 0.022917882, 0.007465989, -0.031090956,
                -0.027950665, -0.014141706, 0.04074059, -0.03427284,
                0.012030848, 0.0024579011, -0.08464227, 0.053655297,
                0.036456484, 0.040220674, 0.070375785, 0.04487912,
                0.013185061, -0.0031766847, 0.0258918, -0.028595362,
                0.012301205, -0.020703042, 0.0011009214, 0.02058866,
                0.01374657, -0.006670518, -0.025101528, 0.0030649027,
                0.03173565, -0.029822363, -0.053031396, -0.030259091,
                -0.022397967, -0.0011113198, -0.045586206, -0.010179948,
                0.016543716, 0.019091303, 0.03888969, 0.009202507,
                -0.030966176, -0.050785363, 0.0011516132, -0.012581958,
            ],
            [
                0.0062006167, 0.010169546, 0.027822595, 0.006481248, -0.028517492,
                0.006574792, 0.01706506, 0.011084938, -0.010436814, 0.012708591,
                0.010276454, 0.025671087, 0.017599596, -0.007557002, 0.023372583,
                -0.015982624, -0.00782427, 0.0010807648, 0.04719952, 0.038753856,
                0.021060716, 0.027475147, 0.0013321638, 0.00566274, -0.017559506,
                -0.023960574, -0.011292071, 0.029693471, -0.0011809904, -0.030842723,
                0.05580555, -0.046584807, 0.024187751, -0.04297669, 0.012060467,
                0.030762542, -0.013563849, 0.071414, 0.0070625558, -0.0102497265,
                0.024762377, 0.025123188, 0.032499783, 0.025149915, 0.026566437,
                0.0030268098, -0.0397962, -0.013256491, -0.0075436383, 0.060188744,
                -0.048856582, -0.022517325, -0.01057713, 0.08285307, -0.007142736,
                -0.021822428, -0.024615379, -0.019082932, 0.009614965, -0.015782174,
                0.0054054945, -0.013570531, 0.03314123, 0.026218988, 0.014018205,
                0.042949963, -0.031163445, 0.014886825, -0.029720198, 0.003412678,
                -0.021956064, 0.021474982, 0.015581722, 0.0073966407, 0.021020625,
                0.022423781, -0.045355372, 0.020432636, 0.0014616217, -0.037257154,
                0.010750853, -0.026018536, 0.012414597, -0.022397056, 0.022985045,
                -0.0035112328, -0.079913124, -0.047493517, 0.0001557671, -0.00916061,
                0.017719867, 0.0265798, -0.0052083842, 0.082478896, 0.030655636,
                -0.005325314, 0.0401971, -0.03586736, 0.01309613, 0.046664987,
            ],
            [
                -0.02554478, -0.023016976, -0.013807646, 0.005973363, -0.046160977,
                0.010968631, -0.019498378, 0.039555665, -0.0008891768, -0.023245621,
                0.024719115, 0.017389758, 0.01940946, -0.0051921573, 0.049793903,
                0.05838081, -0.026116394, -0.0015743193, -0.06412235, 0.043188587,
                0.027970962, -0.009749189, -0.0020022357, -0.0024404728, 0.02987634,
                -0.010098508, -0.047659878, -0.07591029, 0.014455475, -0.02297887,
                0.008123266, -0.043163184, 0.04631341, -0.006202008, -0.041206993,
                0.0134392725, -0.033915743, 0.0128232, -0.0073611136, -0.026294228,
                -0.014798443, 0.02358859, 0.02017161, 0.059142962, -0.014493582,
                0.031705506, -0.046694484, -0.04585612, -0.0032550222, -0.03259468,
                0.0025230392, -0.04948904, 0.01075904, 0.11889564, -0.0266499,
                -0.01986675, -0.0007387313, 0.04303616, 0.013096305, -0.00799624,
                -0.024757223, -0.011648216, 0.04811717, -0.008282047, 0.009349059,
                -0.009565002, -0.021911858, 0.055586252, 0.0074119237, 0.015560594,
                0.032620087, 0.047583662, 0.020794034, -0.03808217, 0.0054303296,
                0.008840958, -0.012702526, -0.029012568, -0.012569149, -0.049412824,
                -0.018583795, -0.0024674656, -0.005766947, -0.021911858, -0.009412572,
                -0.0246429, -0.07524976, -0.023499673, 0.002033992, 0.0012075339,
                -0.05309656, 0.020730522, -0.03409358, 0.031603884, -0.005179455,
                -0.010682824, -0.048447434, -0.047304206, -0.011489435, 0.04013998,
            ],
            [
                -0.011753065, 0.020547558, -0.001017371, -0.011706655, -0.012959696,
                0.012692845, 0.0045277723, 0.0100243315, -0.03255587, -0.0017765922,
                0.042162523, 0.052349284, -0.04490065, -0.026476301, 0.06348743,
                0.06223439, -0.035433225, 0.01890004, -0.026847573, 0.037150357,
                0.072908446, -0.00150539, 0.022670768, -0.0008295598, 0.026685141,
                -0.016672412, -0.04371722, -0.060749304, 0.008545046, -0.05685095,
                0.010691459, -0.03487632, 0.037080742, -0.05169956, -0.02891277,
                0.018865235, -0.009647259, -0.0058852336, -0.011550025, -0.02605862,
                0.015326553, -0.012193949, 0.0040143733, 0.050957017, -0.0013893676,
                0.028889565, -0.021893417, -0.013354173, 0.007831508, 0.027682934,
                -0.030931558, -0.025919393, -0.030444264, 0.08325764, 0.037359197,
                0.023332095, -0.0062420024, -0.006793109, 0.0042232135, -0.009426816,
                -0.017530978, -0.036732677, 0.033971343, -0.021174079, -0.027497297,
                0.029075202, -0.0058765323, 0.035526045, 0.011799473, -0.003912854,
                -0.022392314, 0.04427413, -0.014003898, -0.062884115, -0.028054204,
                0.03865865, -0.052906193, 0.02305364, 0.0030194817, -0.005221006,
                -0.06622556, -0.0042551197, 0.005186199, -0.0036576046, 0.03353046,
                -0.025176851, -0.05699018, -0.0064856494, 0.040468596, -0.042255342,
                -0.039934892, -0.034273002, -0.006648081, 0.01686965, -0.0047540157,
                -0.007802503, -0.02030391, 0.0003186989, 0.0050005633, 0.046223305,
            ],
            [
                -0.0074881376, 0.017638724, 0.01214148, -0.006876012, -0.023510374,
                0.05429494, -0.0027842796, 0.0073217344, -0.037702177, -0.059049312,
                0.045546893, 0.0048167743, -0.0064184037, -0.06789245, 0.036109462,
                0.033565875, -0.057718087, 0.005437814, 0.0009753893, 0.0041957344,
                -0.003880757, 0.0124208, 0.015011933, 0.006893841, -0.008367697,
                -0.025435897, -0.050824247, -0.046735488, 0.0234034, -0.031973157,
                0.03725051, -0.047591273, 0.05058653, -0.017947758, -0.013585621,
                0.01773381, -0.024045242, 0.006525377, -0.017317804, -0.04257541,
                0.013347902, 0.0049059186, 0.029809918, 0.06770227, 0.011677929,
                0.018981835, -0.044049267, 0.0053219264, 0.020681523, 0.042504095,
                -0.028074572, -0.028098345, -0.028502466, 0.096371144, -0.015713204,
                0.022024633, 0.0030725135, 0.026909752, 0.0365849, 0.01382334,
                0.00017457464, -0.0075951107, 0.037892353, 0.009164054, 0.01127975,
                -0.007018643, -0.06290036, 0.051965296, -0.00303537, 0.027099926,
                -0.045974787, 0.06627596, 0.017412892, -0.00885502, -0.0028466808,
                -0.028621325, 0.0117195295, -0.015903378, 0.0021840401, 0.0050218063,
                -0.060475625, 0.027622906, -0.017056312, 0.024318619, 0.025530983,
                -0.019243324, -0.082250655, -0.008385525, -0.035111044, 0.012385142,
                -0.05719511, -0.016283728, -0.038534194, 0.021727486, 0.022476299,
                0.004736544, -0.035586484, -0.056529496, 0.0006370117, -0.016450131,
            ],
            [
                0.00032382802, -0.011606677, -0.041677233, 0.036314186,
                0.008783124, 0.005346003, -0.015884615, 0.048494667,
                -0.0018861562, -0.004633013, 0.02965583, 0.015975516,
                -0.008993329, -0.040904593, 0.045290474, 0.017963933,
                -0.043926988, 0.04931276, -0.012941758, 0.032223728,
                0.0011199053, 0.028178718, -0.013248542, 0.0004818362,
                0.01575963, -0.046108566, -0.047676574, -0.016975405,
                0.02447458, -0.048721913, 0.07721878, -0.03895026,
                0.0054681487, 0.021781694, -0.00514148, 0.0021148243,
                -0.061811384, 0.016975405, 0.025792617, -0.02842869,
                -0.0022284482, 0.031405635, 0.019259246, -0.011828245,
                0.0552212, 0.05608474, -0.013623501, -0.0349507,
                0.030314848, -0.0096693905, -0.045222297, 0.014271158,
                -0.017498076, 0.031678334, -0.013293992, 0.016100502,
                -0.000042276068, -0.008254774, -0.00041863293, -0.0323828,
                -0.0132712675, -0.011265806, -0.007442363, -0.02119085,
                0.022679323, 0.027974196, -0.06203863, 0.008158194,
                -0.011010152, 0.018179819, -0.024770003, 0.021736246,
                0.009822783, -0.001661749, -0.018986547, -0.010413627,
                -0.02899681, 0.0347689, 0.005632903, -0.038063996,
                -0.010737455, -0.003457006, -0.047449328, -0.023724664,
                -0.0075389436, -0.0023875216, -0.10562474, -0.0032155553,
                -0.031178389, 0.028655939, -0.031155664, -0.004471099,
                -0.027315177, 0.026315287, 0.00018943229, 0.036336914,
                -0.030837517, -0.004027966, 0.04904006, 0.018532053,
            ],
            [
                -0.037791938, -0.0013202769, -0.04139883, -0.006472875,
                -0.004350668, -0.0138761895, -0.0036585813, 0.017552001,
                -0.014760681, -0.060421154, -0.00688066, 0.017046576,
                0.011245687, -0.0137038855, 0.056561552, 0.03191064,
                -0.010142943, 0.008115503, 0.000101856596, 0.027798327,
                -0.020998074, 0.03436884, -0.02722398, -0.006530309,
                0.010068278, -0.04068664, -0.043948922, -0.020952126,
                0.01502488, -0.022112304, 0.04571791, -0.041674517,
                0.05389659, -0.019045299, 0.009379064, 0.00970644,
                -0.026052315, 0.054402012, 0.03202551, -0.021170378,
                -0.004813016, 0.016081676, 0.0385271, 0.03443776,
                0.0119578745, 0.047785554, 0.008885127, -0.012934263,
                -0.004991063, -0.008155707, -0.012750472, 0.0070127593,
                -0.03147414, 0.061202265, -0.0105564715, 0.020917665,
                -0.004485639, 0.0075066965, 0.036918934, 0.0045344583,
                0.0015019136, -0.03390936, 0.03112953, -0.029245676,
                0.0069725555, 0.041996147, -0.08877085, 0.032140378,
                -0.04110017, 0.0071620895, -0.0025400433, 0.048888296,
                0.006771534, -0.03641351, 0.07052964, 0.0071965503,
                -0.013141027, 0.020596033, 0.011808545, -0.01748308,
                -0.002785576, -0.0024007645, -0.029842997, 0.024191435,
                0.022273121, -0.04355837, -0.10770129, -0.012957237,
                -0.024421174, 0.013830242, -0.058858935, -0.0039514974,
                -0.017276315, 0.06244285, -0.0064958483, -0.012153152,
                -0.053437114, -0.07098912, -0.019010838, 0.022261634,
            ],
            [
                0.010116046, -0.010928943, 0.038127862, -0.038802266,
                -0.013765049, 0.011850226, 0.017630825, 0.053470533,
                -0.02601269, -0.07428069, -0.012536672, 0.017522437,
                -0.010507441, 0.013777092, -0.011073458, 0.021978315,
                -0.015475143, 0.011663561, 0.014451495, 0.052073553,
                -0.0031161036, 0.03832055, 0.04130719, -0.03935624,
                0.03155243, -0.027554184, -0.03340704, -0.0051302807,
                0.020412738, -0.035117134, -0.006497151, -0.037357114,
                0.02468797, -0.0003330618, -0.041042246, 0.0068584387,
                -0.0010093466, 0.019027801, -0.021267783, -0.019569732,
                0.008369824, 0.024977, 0.037429374, -0.0020457897,
                -0.0011395606, 0.001981059, -0.05664986, 0.0017070828,
                -0.01918436, 0.02195423, -0.0051122163, -0.017919853,
                0.00078655273, 0.09224871, -0.015932774, -0.04742499,
                0.011031308, -0.027361497, 0.031118887, 0.0072859623,
                0.00015486433, -0.045618553, 0.018534042, 0.028686218,
                0.0022851427, -0.007587035, -0.0458835, 0.0035496484,
                0.0138854785, 0.051158294, -0.021448428, -0.00008448856,
                -0.008779284, -0.015402885, -0.018196842, -0.006322529,
                -0.011404638, -0.022146916, 0.055782773, -0.0015016007,
                0.009218849, -0.014138379, -0.015860517, 0.01661922,
                0.011488939, 0.0043926523, -0.04937594, 0.011916462,
                0.007599078, -0.024483241, -0.03600831, 0.01765491,
                0.0028466436, -0.008141009, 0.006966825, 0.048243906,
                -0.044727378, -0.07018609, 0.012036892, 0.041331276,
            ],
            [
                -0.002324995, 0.052753214, -0.0009094782, 0.018210432,
                -0.030466652, -0.025764491, -0.0022954326, 0.05959778,
                0.003957882, -0.015775882, -0.0055890307, 0.0028275556,
                0.060488127, 0.018349549, 0.02615402, 0.082579926,
                -0.037951153, 0.030244064, -0.00006575458, 0.034083698,
                0.00094338803, -0.0060689845, -0.00844441, 0.026543548,
                -0.027266957, -0.0019528567, -0.023566442, -0.011240664,
                0.04184643, -0.06510682, 0.027002634, -0.05417221,
                0.05222457, 0.013334377, -0.051306397, -0.02566711,
                -0.022147447, 0.057538845, -0.018460844, -0.022703916,
                -0.021813566, 0.024359409, 0.065663286, 0.024915878,
                0.037700742, 0.04613124, -0.06132283, 0.03655998,
                0.038924973, 0.0074984133, 0.002519759, -0.016819261,
                0.040093556, 0.039342325, -0.029520655, -0.020937128,
                -0.019754631, -0.0030744886, -0.010079036, -0.006482858,
                0.0032988149, -0.05019346, 0.033805463, 0.02145186,
                -0.016513202, 0.0069489004, -0.028407717, -0.015316796,
                -0.035669632, -0.000101022946, -0.0036240013, 0.011991897,
                0.000777317, 0.024484614, 0.006399388, 0.0055438178,
                0.012896158, 0.004500439, -0.006482858, -0.015163767,
                -0.03767292, -0.00055603374, -0.023343854, -0.039370146,
                0.004270896, 0.045268714, -0.06538505, 0.01957378,
                -0.018544313, -0.003147525, -0.019712897, -0.025124554,
                -0.02632096, 0.0019232943, 0.043571483, 0.028199041,
                0.027503457, -0.052335862, -0.008451366, 0.037728567,
            ],
            [
                0.01471098, -0.017839417, -0.019356553, -0.022830268, -0.007193313,
                0.0058174287, -0.018645067, -0.0016557699, -0.012879954, -0.029233625,
                0.029087143, -0.005205343, 0.00718285, -0.033628084, 0.025006572,
                0.07014396, -0.01690821, 0.021993227, -0.014731905, 0.022600083,
                0.010065407, 0.005184417, -0.0037431386, -0.005236732, 0.034632534,
                -0.04145441, -0.04141256, -0.06570765, 0.047753137, -0.023269715,
                0.041266076, -0.04250071, 0.08336919, 0.016510615, -0.012911343,
                -0.012785787, -0.035030127, 0.031284373, -0.005456455, -0.036494948,
                0.010525779, 0.012963658, 0.04842277, 0.06307097, -0.018435808,
                0.014261071, -0.02043424, -0.030614741, 0.001445202, -0.013329864,
                -0.005665715, -0.028354732, -0.004420618, 0.091237366, -0.021114336,
                0.056960575, 0.009814295, 0.013999495, 0.037185505, 0.01174995,
                -0.031389, -0.009824757, 0.020800445, -0.024692683, 0.046288315,
                0.0051556434, -0.051352408, 0.0459535, -0.013340326, 0.051310558,
                0.026450466, 0.011551153, 0.039089773, -0.02716195, 0.034318645,
                -0.010248509, -0.040449962, 0.015610797, 0.0014608965, -0.02057026,
                -0.00634581, -0.0015524478, -0.029296402, -0.0032409145, 0.007350258,
                0.010316519, -0.08830773, -0.0012346341, -0.012231248, 0.02925455,
                -0.030468259, -0.0133194, -0.018540438, 0.035448648, -0.007428731,
                0.01802775, -0.052524265, -0.06771654, -0.0040674917, 0.0055977055,
            ],
            [
                -0.011338893, -0.014434361, -0.037747975, -0.002176588, -0.02344747,
                0.040558994, 0.0044814562, 0.016196826, -0.004659934, -0.013207329,
                0.039265033, 0.0131292455, 0.0010032383, -0.011394667, -0.004629258,
                0.053007793, -0.041005187, 0.03750257, 0.013553129, 0.032817535,
                0.017401548, 0.009693555, -0.008499987, 0.00014727873, -0.015750632,
                -0.035561625, -0.02344747, -0.03806031, 0.035695482, -0.05452485,
                0.061887044, -0.038997315, 0.06144085, -0.008812322, -0.025455343,
                0.011868748, -0.034200735, 0.04912591, -0.009018687, -0.036320154,
                -0.0051172823, 0.026347728, 0.04354849, 0.027396284, 0.018215852,
                0.054257136, -0.027931716, -0.03614168, -0.0009990552, -0.0011266387,
                -0.018807057, -0.008918294, 0.0032209596, 0.10217832, 0.012370716,
                0.025723059, -0.009364487, 0.010184368, 0.00832151, -0.0020817718,
                -0.030475019, -0.0028458782, 0.04432933, -0.02619156, 0.013620058,
                0.026950091, -0.06666131, 0.050375253, 0.036877897, 0.042455316,
                0.004821679, -0.008405171, 0.040581305, -0.030809665, 0.017780812,
                -0.007222758, 0.036342464, 0.017948136, 0.0122033935, -0.028087884,
                -0.011746045, -0.017234225, -0.027664, -0.028020956, 0.040737472,
                0.0026813443, -0.108960465, 0.008371706, -0.021774245, 0.023715187,
                -0.016051812, 0.029158749, 0.022008497, 0.0248976, -0.008700774,
                -0.027351664, 0.009308713, -0.0059232195, 0.0006438433, 0.026035393,
            ],
            [
                -0.019333223, -0.016590405, -0.01493986, 0.004878817, 0.0067538847,
                0.03155454, -0.012682497, 0.020558994, -0.003437624, -0.08359525,
                0.024758175, 0.031457447, 0.018265223, 0.0054704645, 0.051700898,
                -0.013301452, -0.038933445, -0.03694308, -0.007846157, 0.0063655213,
                0.03237981, -0.0412879, 0.0092479065, -0.01037052, 0.01597145,
                -0.023860086, -0.056312714, -0.022961995, 0.0029066585, -0.034224536,
                -0.007196862, -0.042404443, 0.048715353, -0.051797986, -0.01297377,
                0.009915407, 0.045438536, 0.019357495, -0.0051670554, 0.010485816,
                -0.01797395, -0.049637716, -0.0004096022, 0.017354995, -0.011383906,
                0.022731403, -0.015121905, -0.01270677, 0.012275929, 0.0028656982,
                0.023168312, -0.025607722, -0.026651448, 0.07107053, -0.008331612,
                0.020558994, 0.01320436, 0.01917545, 0.033277903, 0.04415208,
                -0.0115295425, -0.046530806, 0.05946817, -0.018969132, 0.01293736,
                0.0391519, -0.030292356, 0.06670144, -0.007196862, 0.01230627,
                0.011996793, 0.041579172, 0.04245299, -0.024491176, 0.005782976,
                -0.005525078, -0.024952358, -0.022719268, 0.04034126, -0.051409625,
                -0.011135111, 0.015036951, -0.01890845, 0.0073910435, 0.01310727,
                -0.0018644484, -0.03551099, -0.006699271, 0.025364993, -0.036093537,
                -0.03184581, -0.016966632, -0.0025744254, 0.042380173, 0.026020357,
                -0.0005628237, -0.024903812, -0.029806903, -0.031433173, 0.02207604,
            ],
            [
                0.019895153, 0.029282387, -0.008320777, -0.02211242, -0.0025787782,
                0.030873034, -0.02082303, -0.00504609, -0.012435976, -0.063625924,
                0.050997145, -0.005079229, -0.0042477534, 0.007531478, -0.0025742592,
                0.0362716, -0.030463323, 0.0028182792, 0.006730129, 0.03458455,
                0.023883823, -0.024558643, 0.008718439, -0.009959627, 0.069458306,
                -0.0430198, -0.058661178, 0.011652702, 0.03202987, -0.052009374,
                -0.015713675, -0.042417284, 0.04485146, -0.013050545, -0.036560807,
                0.009989752, 0.017714037, 0.00060553086, 0.022967996, 0.0039916835,
                0.024642996, -0.007844787, 0.0034554421, 0.051961172, -0.040031314,
                0.00047824887, -0.016243892, -0.014930402, -0.016147489, 0.0013925703,
                0.0052449214, -0.004036872, 0.015424467, 0.11365904, -0.031306848,
                0.018882921, 0.002078688, 0.034174833, 0.0055913692, 0.043381315,
                -0.042224478, -0.02872807, 0.0495511, -0.01684641, 0.03991081,
                -0.0003607578, -0.032487784, 0.044803258, 0.02711332, 0.014629143,
                -0.006477071, 0.0155449705, 0.02670361, -0.023883823, -0.0020410304,
                -0.026269795, -0.024618896, 0.024727348, 0.034102533, -0.008471406,
                -0.025040658, 0.040489227, -0.011291192, -0.010779051, -0.007905039,
                0.040200017, -0.031596057, -0.0014257088, 0.02479965, -0.036102895,
                0.03930829, 0.006995237, -0.04596009, 0.0004891695, 0.0046454156,
                0.01950954, 0.013315653, -0.015412416, -0.0107911015, 0.010375364,
            ]
        ]
        console.log(`📌 Cantidad de embeddings generados: ${vectors.length}`);
        console.log(`Generados ${vectors.length} embeddings`);


        // Subir los embeddings a Pinecone 
        const upsertRequest = vectors.map((vector, idx) => {
            // Asegurarnos de que el docChunk no esté vacío o undefined
            const text = docChunks[idx]?.trim() ? docChunks[idx] : 'Texto no disponible (vacío o no extraído)';

            return {
                id: `doc-${Date.now()}-${idx}`,
                values: vector,
                metadata: {
                    text: text,
                    filename: req.file.originalname
                }
            }
        });

        // Verificamos si el upsertRequest es un array válido
        if (!Array.isArray(upsertRequest) || upsertRequest.length === 0) {
            console.error("❌ Error: upsertRequest no es un array válido o está vacío.");
            return res.status(500).json({ message: "Error al generar el upsertRequest." });
        }

        // Verifica si cada vector es un array de números
        vectors.forEach((vector, idx) => {
            if (!Array.isArray(vector) || vector.some(isNaN)) {
                console.error(`❌ El vector en el índice ${idx} no es válido.`);
            }
        });
        console.log('🚨 upsertRequest válido:'/* , upsertRequest */);



        console.log('Cantidad de docChunks:', docChunks.length);
        console.log('Cantidad de vectores generados:', vectors.length);

        if (docChunks.length !== vectors.length) {
            console.error("❌ Error: La cantidad de docChunks y vectores no coincide.");
            return res.status(500).json({ message: "Error: La cantidad de docChunks y vectores no coincide." });
        }
        // console.log(upsertRequest);
        console.log(`Documento dividido en ${docChunks.length} chunks`);

        console.log('💎');
        // console.log(upsertRequest);

        // Almacenamos los vectores en la base de datos vectorial de Pinecone
        await index.upsert(upsertRequest);

        console.log('Archivo procesado y almacenado en Pinecone con éxito');
        res.status(200).json({ message: "Archivo procesado y almacenado en Pinecone con éxito" });

    } catch (error) {
        console.error("Error procesando el archivo:", error);
        res.status(500).json({ message: "Error interno del servidor" });
    }
};



/**
 * 
 * @brief Divide un texto en fragmentos pequeños, asegurando que cada uno no exceda un tamaño máximo y con superposición de contexto.
 * @param {string} text - El texto que se va a dividir en fragmentos.
 * @param {number} maxChunkSize - El tamaño máximo permitido para cada fragmento (por defecto 200 caracteres).
 * @param {number} overlapSize - El tamaño de la superposición entre fragmentos (por defecto 20 caracteres).
 * 
 * @returns {Array<string>} Un array de fragmentos del texto, cada uno con un tamaño máximo de `maxChunkSize`.
 */
function splitTextIntoChunksWithOverlap(text, maxChunkSize = 200, overlapSize = 20) {
    // Divide el texto en oraciones utilizando expresiones regulares.
    const sentences = text.split(/(?<=\S[.!?])\s+/);

    const chunks = [];
    let currentChunk = "";

    sentences.forEach(sentence => {
        // Si agregar la oración excede el tamaño máximo, comienza un nuevo fragmento y agrega superposición
        if ((currentChunk + sentence).length > maxChunkSize) {
            // Agrega superposición si es posible (superpone los últimos 20 caracteres)
            let overlap = currentChunk.slice(-overlapSize);
            chunks.push(currentChunk); // Agrega el fragmento anterior
            currentChunk = overlap + sentence; // Comienza el nuevo fragmento con la superposición
        } else {
            // De lo contrario, simplemente agrega la oración al fragmento actual
            if (currentChunk) {
                currentChunk += " ";
            }
            currentChunk += sentence;
        }
    });

    // Agrega el último fragmento
    if (currentChunk.length > 0) {
        chunks.push(currentChunk);
    }

    return chunks;
}

/**
 * 
 * Función para obtener los embeddings de un array de textos utilizando la API de OpenAI.
 * Si OpenAI no devuelve un embedding válido, se inserta un vector de ceros de tamaño 1536.
 * @param {Array<string>} texts - Array de textos a convertir en embeddings.
 * @returns {<Array<Array<number>>>} - Array de embeddings generados, 
 * cada uno representado como un vector de números.
 */
async function getEmbeddings(texts) {
    const embeddings = [];

    // Itera sobre cada texto en el array de textos
    for (const text of texts) {
        try {
            // Llama a la API de OpenAI para obtener el embedding del texto
            const response = await openai.embeddings.create({
                model: "text-embedding-3-small",  // Modelo utilizado para obtener los embeddings
                input: text
            });

            console.log("✅ Respuesta de OpenAI:", response.data[0].embedding);  // Muestra el embedding obtenido

            // Verifica si OpenAI ha devuelto una respuesta válida, sino inserta un vector de ceros
            if (!response.data || response.data.length === 0) {
                console.error(`❌ OpenAI no devolvió embeddings para el texto: "${text}"`);
                embeddings.push(Array(1536).fill(0));
                continue;
            }

            // Agrega el embedding válido al array de embeddings
            embeddings.push(response.data[0].embedding);

        } catch (error) {
            return console.error("❌ Error en la llamada a OpenAI:", error);
        }
    }

    return embeddings;
}




const ask = async (req, res) => {

    const { query } = req.body;

    if (!query) {
        res.status(400).send({
            status: "FAILED",
            data: { error: "La clave 'query' no existe o está vacía en el cuerpo de la petición" },
        });
        return;
    };

    try {
        const answer = await queryDocuments(query);

        console.log("RESPUESTA OBTENIDA!!!!", answer);
        return

        await serverLogs(req, `Respuesta obtenida correctamente`);
        res.status(200).send({ status: "OK", data: answer.answer });
    } catch (error) {
        await serverLogs(req, error?.message || error);
        res
            .status(error?.status || 500)
            .send({ status: "FAILED", data: { error: error?.message || error } });
    }
}

const queryDocuments = async (query, topK = 5) => {
    try {
        // Generar embedding para la consulta
        const queryEmbeddingResponse = await openai.embeddings.create({
            model: "text-embedding-3-small",
            input: query,
            encoding_format: "float"
        });
        const queryEmbedding = queryEmbeddingResponse.data[0].embedding;

        // Consultar Pinecone para encontrar documentos similares
        const index = await initializePinecone();
        const queryResponse = await index.query({
            queryRequest: {
                vector: queryEmbedding, // Embedding generado para la pregunta
                topK, // Número de resultados a recuperar
                includeMetadata: true // Esto asegura que también se obtiene el metadata, que incluye el texto
            }
        });

        // Extraer el texto de los documentos más relevantes
        const contexts = queryResponse.matches.map(match => match.metadata.text);

        // Calcular la puntuación promedio de relevancia
        const averageScore = queryResponse.matches.reduce((acc, match) => acc + match.score, 0) / queryResponse.matches.length;

        // Construir el prompt para OpenAI
        const prompt = `
        Contexto: ${contexts.join('\n\n')}
         Pregunta: ${query} Por favor, responde a la pregunta basándote únicamente en el contexto proporcionado. Si la información no está disponible en el contexto, indica que no puedes responder con la información disponible.
         `;

        // Generar respuesta con ChatGPT
        const completion = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [{
                role: "system",
                content: "Eres un asistente experto que responde preguntas basándose únicamente en el contexto proporcionado."
            },
            {
                role: "user",
                content: prompt
            }],
            max_tokens: 500
        });

        const answer = completion.choices[0].message.content;

        return {
            answer,
            relevanceScore: averageScore,
            contexts: queryResponse.matches.map(match => ({
                score: match.score,
                text: match.metadata.text,
                filename: match.metadata.filename
            }))
        };

    } catch (error) {
        console.error("Error al consultar documentos:", error);
        throw error;
    }
}



module.exports = { processFile, ask, upload };




// const ask = async (req, res) => {

//     const { query } = req.body;

//     if (!query) {
//         res.status(400).send({
//             status: "FAILED",
//             data: { error: "La clave 'query' no existe o está vacía en el cuerpo de la petición" },
//         });
//         return;
//     };

//     try {
//         const answer = await queryDocuments(query);

//         console.log("RESPUESTA OBTENIDA!!!!", answer);
//         return

//         await serverLogs(req, `Respuesta obtenida correctamente`);
//         res.status(200).send({ status: "OK", data: answer.answer });
//     } catch (error) {
//         await serverLogs(req, error?.message || error);
//         res
//             .status(error?.status || 500)
//             .send({ status: "FAILED", data: { error: error?.message || error } });
//     }
// }

// const queryDocuments = async (query, topK = 5) => {
//     try {
//         // Generar embedding para la consulta
//         const queryEmbeddingResponse = await openai.embeddings.create({
//             model: "text-embedding-3-small",
//             input: query,
//             encoding_format: "float"
//         });
//         const queryEmbedding = queryEmbeddingResponse.data[0].embedding;

//         // Consultar Pinecone para encontrar documentos similares
//         const index = await initializePinecone();
//         const queryResponse = await index.query({
//             queryRequest: {
//                 vector: queryEmbedding, // Embedding generado para la pregunta
//                 topK, // Número de resultados a recuperar
//                 includeMetadata: true // Esto asegura que también se obtiene el metadata, que incluye el texto
//             }
//         });

//         // Extraer el texto de los documentos más relevantes
//         const contexts = queryResponse.matches.map(match => match.metadata.text);

//         // Calcular la puntuación promedio de relevancia
//         const averageScore = queryResponse.matches.reduce((acc, match) => acc + match.score, 0) / queryResponse.matches.length;

//         // Construir el prompt para OpenAI
//         const prompt = `
//         Contexto: ${contexts.join('\n\n')}
//          Pregunta: ${query} Por favor, responde a la pregunta basándote únicamente en el contexto proporcionado. Si la información no está disponible en el contexto, indica que no puedes responder con la información disponible.
//          `;

//         // Generar respuesta con ChatGPT
//         const completion = await openai.chat.completions.create({
//             model: "gpt-4o-mini",
//             messages: [{
//                 role: "system",
//                 content: "Eres un asistente experto que responde preguntas basándose únicamente en el contexto proporcionado."
//             },
//             {
//                 role: "user",
//                 content: prompt
//             }],
//             max_tokens: 500
//         });

//         const answer = completion.choices[0].message.content;

//         return {
//             answer,
//             relevanceScore: averageScore,
//             contexts: queryResponse.matches.map(match => ({
//                 score: match.score,
//                 text: match.metadata.text,
//                 filename: match.metadata.filename
//             }))
//         };

//     } catch (error) {
//         console.error("Error al consultar documentos:", error);
//         throw error;
//     }
// }



// module.exports = { processFile, ask, upload };





// const askAI = async (req, res) => {
//     try {
//         const { question } = req.body;
//         if (!question) {
//             return res.status(400).json({ error: "Se requiere una pregunta." });
//         }

//         // Crear el modelo de lenguaje
//         const llm = new OpenAI({ modelName: "text-embedding-3-small" });
//         const chain = loadQAStuffChain(llm);

//         // Buscar los documentos más similares en Pinecone
//         const queryEmbedding = await new OpenAIEmbeddings().embedQuery(question);
//         const searchResults = await index.query({
//             vector: queryEmbedding,
//             topK: 3, // Número de documentos relevantes a recuperar
//             includeMetadata: true,
//         });

//         if (!searchResults.matches.length) {
//             return res.json({ result: "No se encontraron documentos relevantes." });
//         }

//         // Generar respuesta con la IA
//         const response = await chain.call({
//             input_documents: searchResults.matches.map((match) => match.metadata.text),
//             question,
//         });

//         res.json({ result: response.text });
//     } catch (error) {
//         console.error("Error al procesar la pregunta:", error);
//         res.status(500).json({ error: "Error interno del servidor" });
//     }
// };




// Controlador para procesar el archivo
// const processFile = async (req, res) => {
//     try {
//         if (!req.file) {
//             console.log('No se ha enviado ningún archivo');

//             return res.status(400).json({ message: "No se ha enviado ningún archivo." });
//         }

//         // Guardar el archivo temporalmente
//         // const filePath = `./uploads/${req.file.originalname}`;
//         // fs.writeFileSync(filePath, req.file.buffer);

//         // // Cargar el PDF y extraer texto
//         // const loader = new PDFLoader(filePath);
//         // const docs = await loader.load();

//         // Cargar y procesar el PDF utilizando pdf-parse
//         const pdfData = await pdfParse(req.file.buffer);


//         // ____________________________________

//         // ____________________________________



//         console.log({ pdfData: pdfData.text });
//         return
//         const docs = pdfData.text;

//         // Dividir en chunks
//         const docChunks = splitTextIntoChunksWithOverlap(docs);



//         console.log({ docChunks });

//         return
//         // Generar embeddings con OpenAI
//         const vectors = await getEmbeddings(docChunks.map((chunk) => chunk.pageContent))


//         console.log(vectors);
//         return
//         // Subir los embeddings a Pinecone
//         const upsertRequest = vectors.map((vector, index) => ({
//             id: `doc-${Date.now()}-${index}`,
//             values: vector,
//         }));
//         await index.upsert(upsertRequest);

//         console.log('Archivo procesado y almacenado en Pinecone con éxito');

//         res.json({ message: "Archivo procesado y almacenado en Pinecone con éxito" });
//     } catch (error) {
//         console.error("Error procesando el archivo:", error);
//         res.status(500).json({ message: "Error interno del servidor" });
//     }
// };






// // Ruta de carga de archivos
// const processFile = async (req, res) => {
//     try {
//         if (!req.file) return res.status(400).json({ error: 'No file uploaded' });
//         const fileBuffer = req.file.buffer;
//         let text = '';

//         if (req.file.mimetype === 'application/pdf') {
//             const pdfData = await pdfParse(fileBuffer);
//             text = pdfData.text;
//         } else if (req.file.mimetype === 'text/plain') {
//             text = fileBuffer.toString();
//         }

//         // Indexar el texto en Pinecone
//         const response = await index.upsert({
//             vectors: [{
//                 id: 'document_id',
//                 values: text.split(' '), // Convierte el texto en vectores
//             }]
//         });

//         res.status(200).json({ message: 'Archivo procesado correctamente', data: response });
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ error: 'Error procesando el archivo' });
//     }
// };

// // Ruta de consulta a IA
// const askAI = async (req, res) => {
//     const userQuestion = req.body.question;
//     try {
//         const queryResponse = await index.query({
//             vector: userQuestion.split(' '),
//             topK: 1,
//         });

//         if (!queryResponse.matches || queryResponse.matches.length === 0) {
//             const openAIResponse = await openai.createCompletion({
//                 model: 'text-davinci-003',
//                 prompt: `Respuesta a la pregunta: ${userQuestion}`,
//                 max_tokens: 150,
//             });
//             return res.status(200).json({ answer: openAIResponse.data.choices[0].text });
//         }

//         const matchedText = queryResponse.matches[0].metadata.text;
//         res.status(200).json({ answer: matchedText });
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ error: 'Error procesando la solicitud' });
//     }
// };

